generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          String       @id @default(uuid())
    name        String
    email       String       @unique
    password    String
    role        userRole     @default(user)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    userProfile UserProfile?
    foundItem   FoundItem[]
    claim       Claim[]
    lostItem    LostItem[]
    review      Review[]

    @@map("users")
}

model FoundItemCategory {
    id        String      @id @default(uuid())
    name      String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
    foundItem FoundItem[]
    lostItem  LostItem[]

    @@map("foundItemCategories")
}

model LostItem {
    id            String            @id @default(uuid())
    userId        String
    user          User              @relation(fields: [userId], references: [id])
    categoryId    String
    category      FoundItemCategory @relation(fields: [categoryId], references: [id])
    lostItemName  String
    description   String
    location      String?
    found         Boolean           @default(false)
    contactNumber String?
    photo         String?
    date          DateTime          @default(now())
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    @@map("lostItems")
}

model FoundItem {
    id            String            @id @default(uuid())
    userId        String
    user          User              @relation(fields: [userId], references: [id])
    categoryId    String
    category      FoundItemCategory @relation(fields: [categoryId], references: [id])
    foundItemName String
    description   String
    date          DateTime          @default(now())
    location      String?
    contactNumber String?
    photo         String?
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt
    claim         Claim[]
    review        Review?

    @@map("foundItems")
}

model Claim {
    id                     String      @id @default(uuid())
    userId                 String
    foundItemId            String
    status                 claimStatus @default(PENDING)
    distinguishingFeatures String
    securityFeatures       String?
    description            String
    photo                  String
    thirdPartyConfirmation String?
    lostDate               DateTime
    createdAt              DateTime    @default(now())
    updatedAt              DateTime    @updatedAt

    user      User      @relation(fields: [userId], references: [id])
    foundItem FoundItem @relation(fields: [foundItemId], references: [id])

    @@map("claims")
}

model UserProfile {
    id        String   @id @default(uuid())
    userId    String   @unique
    bio       String
    photoUrl  String?
    age       Int
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("userProfiles")
}

model Review {
    id          String   @id @default(uuid())
    userId      String
    foundItemId String   @unique
    ratting     Int      @default(0)
    tips        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user      User      @relation(fields: [userId], references: [id])
    foundItem FoundItem @relation(fields: [foundItemId], references: [id])

    @@map("reviews")
}

enum userRole {
    user
    admin
}

enum claimStatus {
    PENDING
    APPROVED
    REJECTED
}
